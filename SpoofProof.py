# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: Sayyed, Jeremy, Chas PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#
#WARING: CODE CONTAINS MANY ARTIFACTS BECAUSE WE ONLY HAD A DAY AND A HALF TO MAKE IT
#        AND NEED TO SLEEP NOW


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QApplication, QPushButton
from datetime import datetime
import sys
import threading
import sched
import time
import subprocess
import psutil
from scapy.all import Ether, ARP, srp, sniff, conf

class Worker(QtCore.QThread):
    scheduler = sched.scheduler(time.time, time.sleep)
    initialize_matrix = QtCore.pyqtSignal(list)
    update_progress = QtCore.pyqtSignal(dict)
    worker_complete = QtCore.pyqtSignal(int)


    def run(self):
        print("thread started")
        #self.scheduler.enter(10, 100, self.updateProgress)
        self.initial = ["hi"]
        self.initialData()
        #try:

        addrs = list(psutil.net_if_addrs().keys())[0]
        sniff(store=False, prn=self.process, iface=addrs)
        #except Exception:
            #print("ERROR: check line 33 in code, you need to write your network interface in the iface= arg. You may also need to run as root.")


    def initialData(self):
        nmap_out = subprocess.run(args=['arp', '-a'],
                                  universal_newlines=True,
                                  stdout=subprocess.PIPE)
        nmap_lines = nmap_out.stdout.splitlines()
        data = []
        for i in nmap_lines[3:]:
            line = i.split(" ")
            line = [i for i in line if i]
            data.append(line)
        self.initial = data
        self.initialize_matrix.emit(data)

    def updateProgress(self):
        print("update called")
        while(True):
            now = datetime.now()
            curr_time = now.strftime("%H:%M:%S")
            attack = False
            for i in range(0,len(self.initial)):
                self.index = i
                sniff(store=False, prn=self.process, iface="Ethernet0")
                mac =self.process(self.initial[i][1])
                self.update_progress.emit({"index":i, "mac":mac, "time":curr_time, "attack":attack})
                print("update sent")
                time.sleep(0.5)
            time.sleep(5)
        self.worker_complete.emit(10)
        print("worker finished")
        #self.scheduler.enter(10, 100, self.updateProgress)



    def get_mac(self, ip):
        p = Ether(dst='ff:ff:ff:ff:ff:ff') / ARP(pdst=ip)
        result = srp(p, timeout=3, verbose=False)[0]
        return result[0][1].hwsrc

    def process(self, packet):
        # if the packet is an ARP packet
        if packet.haslayer(ARP):
            # if it is an ARP response (ARP reply)
            if packet[ARP].op == 2:
                try:
                    # get the real MAC address of the sender
                    currip = packet[ARP].psrc
                    now = datetime.now()
                    curr_time = now.strftime("%H:%M:%S")

                    for i in range(0,len(self.initial)):
                        if str(currip) == self.initial[i][0]:
                            index = i
                            break
                        elif i == (len(self.initial)-1):
                            return

                    real_mac = self.get_mac(packet[ARP].psrc)
                    # get the MAC address from the packet sent to us
                    response_mac = packet[ARP].hwsrc
                    # if they're different, definitely there is an attack
                    if real_mac != response_mac:
                        print(f"[!] You are under attack, REAL-MAC: {real_mac.upper()}, FAKE-MAC: {response_mac.upper()}")
                        self.update_progress.emit({"index": index, "mac": response_mac, "time": curr_time, "attack": True})
                    else:
                        print(f"[!] You are clear, REAL-MAC: {real_mac.upper()}, FAKE-MAC: {response_mac.upper()}")
                        self.update_progress.emit({"index": index, "mac": response_mac, "time": curr_time, "attack": False})
                except IndexError:
                    # unable to find the real mac
                    # may be a fake IP or firewall is blocking packets
                    pass




class Ui_MainWindow(QtWidgets.QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1500, 1000)
        MainWindow.setStyleSheet("background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,stop: 0 white, stop: 0.4 grey,stop: 1 lightblue);}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setMinimumSize(QtCore.QSize(1000, 0))
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.gridLayout_6.addLayout(self.horizontalLayout_2, 2, 2, 1, 1)
        self.labelImage = QtWidgets.QLabel(self.centralwidget)
        self.labelImage.setAlignment(QtCore.Qt.AlignCenter)
        self.pixmapImage = QtGui.QPixmap('jd.png')
        self.labelImage.setPixmap(self.pixmapImage)
        self.gridLayout_6.addWidget(self.labelImage, 0, 0, 1, 4)
        self.gridLayout_5 = QtWidgets.QGridLayout()
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.gridLayout_6.addLayout(self.gridLayout_5, 1, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_6.addWidget(self.pushButton, 3, 1, 1, 1)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        # 0, 0, 1470, 457
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 881, 441))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.tableWidget = QtWidgets.QTableWidget(self.scrollAreaWidgetContents_4)
        self.tableWidget.setGeometry(QtCore.QRect(0, 0, 881, 441))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        #self.tableWidget.setRowCount(31)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(0, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(1, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(2, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(3, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(4, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(5, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(6, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(7, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(8, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(9, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(10, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(11, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(12, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(13, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(14, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(15, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(16, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(17, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(18, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(19, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(20, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(21, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(22, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(23, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(24, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(25, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(26, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(27, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(28, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(29, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget.setVerticalHeaderItem(30, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.label = QtWidgets.QLabel(self.scrollAreaWidgetContents_4)
        self.label.setGeometry(QtCore.QRect(1040, 10, 361, 61))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Semibold")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.scrollAreaWidgetContents_4)
        self.label_2.setGeometry(QtCore.QRect(1040, 80, 291, 61))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI Semibold")
        font.setPointSize(28)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.scrollAreaWidgetContents_4)
        # 880, 159, 561, 261
        # 589
        self.scrollArea_2.setGeometry(QtCore.QRect(880, 162, 565, 279))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 589, 279))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.scrollAreaWidgetContents)
	# 0, 0, 671, 301
        self.tableWidget_2.setGeometry(QtCore.QRect(0, 0, 589, 279))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(3)
        #self.tableWidget_2.setRowCount(11)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(0, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(1, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(2, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(3, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(4, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(5, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(6, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(7, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(8, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(9, item)
        # item = QtWidgets.QTableWidgetItem()
        # self.tableWidget_2.setVerticalHeaderItem(10, item)
        # item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents_4)
        self.gridLayout_6.addWidget(self.scrollArea, 1, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1500, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        #thread instantiated
        self.__run_thread = Worker()
        self.start()

        #log
        self.macLog = []
        self.attackLog = []
        self.sinceLastAttack = 10
        self.attackActive = False
        self.file = open("SpoofyLog.txt","a")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def start(self):
        self.__run_thread.start()
        self.__run_thread.update_progress.connect(self.updateProgress)
        self.__run_thread.worker_complete.connect(self.workerFinish)
        self.__run_thread.initialize_matrix.connect(self.initializeMatrix)

    def updateLog(self, time, real, fake):
        self.attackLog.append([real, fake, time])
        self.tableWidget_2.setRowCount(len(self.attackLog))
        for i in range(0,len(self.attackLog)):
            item = QtWidgets.QTableWidgetItem()
            item = self.tableWidget_2.setVerticalHeaderItem(i,item)
            for j in range(0,3):
                self.tableWidget_2.setItem(i, j, QtWidgets.QTableWidgetItem())
                self.tableWidget_2.item(i,j).setText(self.attackLog[i][j])

    def updateProgress(self, val):
        #print("update recieved")
        #message = "{0[ip]} {0[mac]} {0[time]}".format(val)
        # self.textBrowser_3.setText(message)
        self.tableWidget.setItem(val["index"], 4, QtWidgets.QTableWidgetItem())
        self.tableWidget.item(val["index"], 4).setText(val["time"])
        if(val["attack"] and (not self.attackList[val["index"]])):
            self.attackList[val["index"]] = True
        if(val["attack"] and self.attackList[val["index"]]):
            self.sinceLastAttack = 10
            self.attackActive = True
            self.tableWidget.setItem(val["index"], 3, QtWidgets.QTableWidgetItem())
            self.tableWidget.item(val["index"], 3).setBackground(QtGui.QColor(255, 0, 0))
            if(self.attackActive):
                if(not MainWindow.isVisible()):
                    MainWindow.show()
                self.label_2.clear()
                self.label_2.setText("ATTACKED")
                self.label_2.setStyleSheet("background-color: red; border: 1px solid black;")

            self.file.write(str(val["time"]) + ": ")
            self.file.write(str(self.macLog[val["index"]]) + ", ")
            self.file.write(str(val["mac"]) + "\n")

            self.updateLog(val["time"], self.macLog[val["index"]], val["mac"])
        elif(not val["attack"] and self.attackList[val["index"]]):
            self.sinceLastAttack -= 1
            self.tableWidget.setItem(val["index"], 3, QtWidgets.QTableWidgetItem())
            self.tableWidget.item(val["index"], 3).setBackground(QtGui.QColor(255, 255, 0))
            if(self.sinceLastAttack < 1):
                self.attackActive = False
                self.attackList[val["index"]] = False
                self.label_2.clear()
                self.label_2.setText("Protected")
                self.label_2.setStyleSheet("background-color: green; border: 1px solid black;")
        #self.show()
        #print("after update call")
        #self.scheduler.enter(10, 100, self.updateProgress)

    def initializeMatrix(self, l):
        print(l)
        self.tableWidget.setRowCount(len(l))
        self.attackList = [False]*len(l)
        self.macLog = [True]*len(l)
        for i in range(0, len(l)):
            now = datetime.now()
            curr_time = now.strftime("%H:%M:%S")
            item = QtWidgets.QTableWidgetItem()
            self.tableWidget.setVerticalHeaderItem(i,item)
            for j in range(0,3):
                print("initisl" + str(i) + str(j))
                self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem())
                self.tableWidget.item(i, j).setText(l[i][j])
                if(j == 1):
                    self.macLog[i] = l[i][1]
                #self.tableWidget(i,j).setText(l[i+j])
            self.tableWidget.setItem(i, 3, QtWidgets.QTableWidgetItem())
            self.tableWidget.item(i, 3).setBackground(QtGui.QColor(0, 128, 0))
            self.tableWidget.setItem(i, 4, QtWidgets.QTableWidgetItem())
            self.tableWidget.item(i, 4).setText(curr_time)



    def workerFinish(self, emp):
        print("received worker finished signal")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.pushButton.setText(_translate("MainWindow", "Minimize and Run in Background"))


        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "IP"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Real MAC"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Type"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Changed"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Last Check"))

        self.label.setText(_translate("MainWindow", "STATUS:"))
        self.label_2.setText(_translate("MainWindow", "Protected"))
        self.label_2.setStyleSheet("background-color: green; border: 1px solid black;")

        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Real MAC"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Fake MAC"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Time"))

        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Last Check"))
        ### TABLEWIDGET CELLS (For adding text and color) ###

        # Will need to loop through Sayyed array to fill in columns 0-2
        # The last Status column can be traversed as well to change the color on check

        ### End of cell editing

        def MinimizeAndRunInBackground():
            self.pushButton.clicked.connect(MainWindow.hide)

            ### MULTI-THREADING CODE GOES HERE ###

            ### END OF MULTI-THREADING CODE ###


            # MainWindow.show()

        MinimizeAndRunInBackground()
    def getFileObj(self):
            return self.file
        # self.pushButton.clicked.connect(MainWindow.hide)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyle('Fusion')
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setStyleSheet("background-image: url(bg3.jpg);")
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    app.exec_()
    ui.getFileObj().close()
    sys.exit()
